# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:
            return l2
        if not l2:
            return l1
        if l1.val < l2.val:
            l1.next=self.mergeTwoLists(l1.next, l2)
            return l1
        else:
            l2.next=self.mergeTwoLists(l1, l2.next)
            return l2

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy_node = ListNode(0)
        cur = dummy_node
        while l1 is not None and l2 is not None:
            if l1.val <= l2.val:
                dummy_node.next = l1
                l1=l1.next
            else:
                dummy_node.next = l2
                l2=l2.next
            dummy_node = dummy_node.next
        while l1 is not None:
            dummy_node.next = l1
            dummy_node = dummy_node.next
            l1 = l1.next
        while l2 is not None:
            dummy_node.next = l2
            dummy_node = dummy_node.next
            l2 = l2.next
        return cur.next
