class Solution(object):
    def countArrangement(self, N):
        """
        :type N: int
        :rtype: int
        """
        cnt=0
        l = list(xrange(1,N+1))
        from itertools import permutations
        pm = permutations(l)
        for t in pm:
            if all([self.number_checker(idx+1, n) for idx, n in enumerate(t)]):
                cnt+=1
        return cnt                    

    def number_checker(self, idx, n):
        return any([n%idx==0, idx%n==0])


class Solution(object):
    def countArrangement(self, N):
        """
        :type N: int
        :rtype: int
        """
        cache = dict()
        def solve(idx, nums):
            if not nums: return 1
            key = idx, tuple(nums)
            if key in cache: return cache[key]
            ans = 0
            for i, n in enumerate(nums):
                if n % idx == 0 or idx % n == 0:
                    ans += solve(idx + 1, nums[:i] + nums[i+1:])
            cache[key] = ans
            return ans
        return solve(1, range(1, N + 1))
        #idx = 1, 1-15
