# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def checkSymmetricTree(self, root: Optional[TreeNode]) -> bool:
        
        def helper(p,q):
            if not p and not q:
                return True
            elif p is None and q is not None:
                return False
            elif p is not None and q is None:
                return False
            elif p.val != q.val:
                return False
            
            return helper(p.left, q.right) and helper(p.right, q.left)
        
        if root is None:
            return True
        else:
            return helper(root.left, root.right)
    
/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     val: number
 *     left: TreeNode | null
 *     right: TreeNode | null
 *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.left = (left===undefined ? null : left)
 *         this.right = (right===undefined ? null : right)
 *     }
 * }
 */

function checkSymmetricTree(root: TreeNode | null): boolean {
    
    const helper = (p:TreeNode|null, q:TreeNode|null):boolean => {
    if (! p && !q) {return true};
    if (!p || !q ) {return false};
    if (p.val !== q.val){return false};
    return helper(p.left, q.right)&&helper(p.right, q.left)}
    
    if (root === null){return true}
    return helper(root.left,root.right)
    
    
};

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def traverse(n, l=float('-inf'),r=float('inf')):
            if not n:
                return True
            if not l<n.val<r:
                return False
            return traverse(n.left, l, n.val) and traverse(n.right, n.val, r)
        return traverse(root)
        
