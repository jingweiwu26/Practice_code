class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        res = []
        board = [['.'] * n for i in range(n)]
    
        def is_valid(board, row, col):
            for i in range(n):
                for j in range(n):
                    if i + j == row + col and i!=row and j !=col:
                        if board[i][j] == 'Q':
                            return False

            for i in range(n):
                for j in range(n):
                    if i - j == row - col and i!=row and j !=col:
                        if board[i][j] == 'Q':
                            return False

            for i in range(n):
                if board[i][col] == 'Q':
                    return False
            return True
    
        def backtrack(board, row):
            if row == n:
                res.append(["".join(r) for r in board])
            
            for col in range(n):
                if not is_valid(board, row, col):
                    continue
                board[row][col] = 'Q'
                backtrack(board, row + 1)
                board[row][col] = '.'
        
        backtrack(board, 0)

        return res
