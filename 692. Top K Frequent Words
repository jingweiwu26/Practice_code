class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        dic = {}
        for word in words:
            if word not in dic:
                dic[word] = 0
            dic[word] += 1
        
        r = sorted(dic.keys(), key=lambda x:(-dic[x], x))
        return r[:k]
    
    def topKFrequent(self, words, k):
        dic = collections.Counter(words)
        heap_l = [(-v, ke) for ke, v in dic.items()]
        heapq.heapify(heap_l)
        return [heapq.heappop(heap_l)[1] for _ in range(k)]
