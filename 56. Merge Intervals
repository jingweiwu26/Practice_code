class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        if not intervals:
            return []
        if len(intervals) == 1:
            return intervals
        
        intervals = sorted(intervals, key=lambda x:x.start)
        res = []
        current = None
        while len(intervals)>=1:
            if not current:
                current = intervals.pop(0)
            next = intervals.pop(0)
            if set(range(current.start, current.end+1)) & set(range(next.start, next.end+1)):
                current = Interval(min(current.start,next.start), max(current.end, next.end))
            else:
                res.append(current)
                current = next
        res.append(current)
        return res

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals = sorted(intervals,key=lambda lis:lis[0])
        res = [intervals[0]]
        for r in range(1, len(intervals)):
            last = res[-1]
            if last[1] >= intervals[r][0]:
                lis = [last[0], max(last[1], intervals[r][1])]
                res[-1] = lis
            else:
                res.append(intervals[r])
        return res

    def merge(self, intervals):
        res = []
        intervals = sorted(intervals, key=lambda x:x.start)
        for i in intervals:
            if res and i.start <= res[-1].end:
                res[-1].end = max(i.end,res[-1].end)
            else:
                res.append(i)
        return res
