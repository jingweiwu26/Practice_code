class Node(object):
    def __init__(self):
        self.isword = False
        self.next = collections.defaultdict(Node)
        
        
class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = Node()
        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        cur = self.root
        for c in word:
            cur = cur.next[c]
        cur.isword = True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        cur = self.root
        for c in word:
            cur = cur.next.get(c)
            if not cur:
                return False
        return cur.isword
            

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        cur = self.root
        for c in prefix:
            cur = cur.next.get(c)
            if not cur:
                return False
        return True


class Trie(dict):

    def __init__(self):
        super().__init__()
        self.is_end = False
        
    def insert(self, word: str) -> None:
        curr = self
        for w in word:
            if w not in curr:
                curr[w] = Trie()
            curr = curr[w]
        curr.is_end = True

    def search(self, word: str) -> bool:
        curr = self
        for w in word:
            if w not in curr:
                return False
            curr = curr[w]

        return curr.is_end == True

    def startsWith(self, prefix: str) -> bool:
        curr = self
        for w in prefix:
            if w not in curr:
                return False
            curr = curr[w]
        
        return True
