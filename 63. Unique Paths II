class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        n_row = len(obstacleGrid)
        n_col = len(obstacleGrid[0])
        res = [[0] * n_col for i in range(n_row)]
        if obstacleGrid[0][0] == 1 or obstacleGrid[n_row-1][n_col-1] ==1:
            return 0
        else:
            res[0][0] = 1

        for i in range(n_row):
            if obstacleGrid[i][0] != 1:
                res[i][0] = 1
            else:
                break
        for i in range(n_col):
            if obstacleGrid[0][i] != 1:
                res[0][i] = 1
            else:
                break
        j = 0
        i = 0
        for i in range(1, n_row):
            for j in range(1, n_col):
                p = res[i-1][j] if obstacleGrid[i-1][j]!=1 else 0
                q = res[i][j-1] if obstacleGrid[i][j-1]!=1 else 0
                res[i][j] = p + q
        return res[i][j]
